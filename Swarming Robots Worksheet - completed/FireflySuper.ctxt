#BlueJ class context
comment0.target=FireflySuper
comment0.text=\r\n\ FireflySuper\ is\ a\ parent\ to\ all\ fireflys.\ \r\n\ It\ contains\ methods\ used\ by\ Fireflys.\ \ \r\n\ Hides\ unnessecarily\ complicated\ or\ unintuitive\ code\ from\ the\ Firefly\ class.\r\n\ \r\n\ @author\ David\ Saunders\ \r\n\ @version\ 1.0\ 19.03.2019\r\n
comment1.params=
comment1.target=FireflySuper()
comment1.text=\r\n\ Firefly\ Constructor\ \r\n\ Gives\ each\ fly\ its\ own\ unique\ number.\r\n
comment2.params=visionDistance
comment2.target=boolean\ neighbourFlyFlashing(int)
comment2.text=\r\n\ Method\ neighbourFlyFlashing\r\n\ Used\ only\ for\ firefly\ synchronisation\ algorithm.\r\n\ Called\ when\ a\ firefly\ decides\ whether\ to\ flash\ earlier\ in\ its\ cycle.\r\n\ Goes\ through\ every\ neighbour\ of\ the\ firefly\ and\ sees\ if\ they're\ flashing.\r\n\ \r\n\ @param\ robotNum\ The\ number\ of\ the\ firefly.\r\n\ \ The\ first\ firefly\ created\ will\ have\ a\ \r\n\ @return\ Boolean\ returns\ true\ only\ if\ there\ are\ neighbour\ fireflys\ flashing\r\n
comment3.params=neighbourFly
comment3.target=boolean\ checkOrder(FireflySuper)
comment3.text=\r\n\ Method\ checkOrder\r\n\ Used\ only\ for\ firefly\ synchronisation\ algorithm.\r\n\ The\ Firefly\ Synchronisation\ Algorithm\ requires\ the\ concurrent\ execution\ of\ all\ agents.\r\n\ Currently\ Greenfoot\ does\ not\ support\ the\ use\ of\ concurrency\ therefore\ a\ work-around\ is\ necessary.\ \ \ \ \ \ \ \r\n\ The\ clock\ of\ each\ firefly\ is\ incremented\ one\ at\ a\ time,\ and\ not\ simultaniously,\ this\ can\ cause\ issues.\r\n\ \r\n\ Suppose\ there\ are\ 2\ fireflys\ A\ and\ B,\ where\ A\ was\ created\ before\ B\r\n\ At\ the\ start\ of\ the\ Act\ cycle\ A\ is\ flashing\ so\ B\ should\ increment\ its\ clock\r\n\ A\ runs\ first,\ then\ resets\ its\ clock\ and\ is\ now\ no\ longer\ flashing\r\n\ B\ looks\ at\ its\ neighbour\ A,\ if\ code\ for\ both\ fireflys\ was\ executed\ simultaneously\ then\ B\ would\ see\ A\ flash\ B\ would\ increments\ its\ clock\r\n\ Instead\ B\ sees\ a\ neighbour\ that\ is\ not\ flashing\ so\ does\ not\ change\ its\ clock.\r\n\r\n\ To\ fix\ this\ issue\ each\ firefly\ has\ a\ unique\ number\ that\ specifies\ what\ number\ firefly\ it\ is.\r\n\ If\ a\ neighbour\ has\ a\ higher\ number\ then\ the\ code\ for\ it\ this\ act\ cycle\ has\ not\ been\ run.\r\n\ This\ means\ that\ in\ order\ to\ get\ the\ fireflys\ as\ if\ they're\ running\ concurrently\ 1\ must\ be\ added\ to\ the\ value\ of\ the\ neighbours\ clock.\r\n\ If\ a\ neighbour\ has\ a\ lower\ number\ then\ the\ code\ for\ it\ this\ act\ cycle\ has\ already\ been\ run.\r\n\ This\ means\ that\ in\ order\ to\ get\ the\ fireflys\ as\ if\ they're\ running\ concurrently\ 1\ must\ be\ subtracted\ to\ the\ value\ of\ the\ neighbours\ clock.\ \ \ \ \ \ \r\n\ Then\ it\ can\ be\ determined\ if\ that\ firefly\ should\ be\ flashing\ at\ the\ same\ time\ or\ not.\r\n\r\n\ @param\ neighbourFly\ A\ parameter\r\n\ @return\ The\ return\ value\r\n
comment4.params=
comment4.target=void\ crawlAround()
comment4.text=\r\n\ Method\ crawlAround\r\n\ Approximates\ the\ crawling\ behaviour\ of\ insects.\ \r\n
numComments=5
